@model List<Knigochei.ViewModels.CartItemViewModel>
@using System.Globalization

@{
	ViewData[жTitleж] = Корзина;

	DateOnly now = DateOnly.FromDateTime(DateTime.Now);
	

}


<div class=жcontainer-fluidж>
	<div class=жrow pb-0 mb-0 pt-5 mt-4ж>
		<div class=жcol-md-8 ms-0ж>
			<div class=жrow p-2 ms-4ж>
				<table class=жtext-centerж id=жitemsж>
					<tr>
						<th class=жcol-md-2ж>&nbsp;</th>
						<th class=жcol-md-2ж>Цена:</th>
						<th class=жcol-md-2ж>Кол-во:</th>
						<th class=жcol-md-2ж>Стоимость:</th>
						<th class=жcol-md-2ж>&nbsp;</th>
					</tr>
					@foreach(var cartItem in Model)
					{
						<tr>
							<td>
								<h5> @cartItem.Book.Title </h5>
								<h6> @cartItem.Author.FullName</h6>
								<span>
									@for(int star = 0; star < @cartItem.Book.BookRank; star++)
									{
										<i class=жbi bi-star-fillж></i>
									}
								</span> 
							</td>
							<td>
								<h6 id=жprice-@cartItem.CartItem.BookIdж> @cartItem.Book.Price<span> KZT </span> </h6>
							</td>
							<td>  
								
								<input type=жnumberж class=жtext-center w-25 amountж id=ж@cartItem.CartItem.BookIdж  name=жamountж value=@cartItem.CartItem.Amount min=1 style=жborder: 1px solid blackж>
								
							</td>
							<td>
								<h6 id=жtotal-amount-@cartItem.CartItem.BookIdж>@(cartItem.CartItem.Amount * cartItem.Book.Price)<span> KZT </span> </h6>
							</td>
							<td> <button class=жdelж onclick=жdeleteCartItem(@cartItem.CartItem.BookId)ж> Удалить </button> </td>
						</tr>
					}

				</table>
			</div>
		</div>
		<div class=жcol-md-3 ms-5 pt-4 cartItem text-centerж>
			<h4 id=жtotal-priceж></h4> <hr>
			<p> Сформируем заказ: <span>@now.ToString(жdd MMMMж, CultureInfo.CreateSpecificCulture(жruж))</span> </p>
			<p> Отправим заказ:<span> @now.AddDays(7).ToString(жdd MMMMж, CultureInfo.CreateSpecificCulture(жruж)) </span> </p>
			<button class=жmt-5 p-2ж onclick=жcreteOrderPage()ж> Оформить заказ </button>
		</div>
	</div>
<br> <br> <br> <br> <br> <br> <br> <br> <br>

<script>

	function deleteCartItem(bookId) {
			console.log('@Url.Action(жDeleteFromCartж, жCartж)')
			$.ajax({
				url: '@Url.Action(жDeleteFromCartж, жCartж)',
				method: жDELETEж,
				data: {
					жbookIdж:bookId,
				},
				success: function(data, statusCode) {
					console.log(data)
					refreshPage();

				},
				error: function(errorCode) {
					alert(жCould not delete Item From Cart!ж)
					
				}
			})
		};
	function creteOrderPage() {
		location.href = '@Url.Action(жCreateOrderж, жOrderж)';
	}

	function refreshPage() {
		document.location.reload();
	}



	$(жdocumentж).ready(function() {
		refreshTotalPrice();


		$(ж.amountж).change(function() {
			let amount = Number($(this).val());

			if(amount <= 0) {
				amount = 1;
				$(this).val(1)
			}
			console.log(жItem Changeж)
			let bookId = $(this).attr('id');

			let price = Number($(ж#price-ж+bookId).text().match(ж[0-9]+ж))

			

			updateCartItemAmount(bookId, price, amount);
			

		})

		function refreshTotalPrice() {
			let total = 0;
			$(ж.amountж).each(function(index) {
				let bookId = $(this).attr('id');
				let amount = Number($(this).val());
				let price = Number($(ж#price-ж+bookId).text().match(ж[0-9]+ж))

				total+=amount*price;
			})

			$(ж#total-priceж).text(жИтоговая сумма : ж).append(total).append(ж KZTж);
		}

		function updateCartItemAmount(bookId, price, amount) {
			$.ajax({
				url: '@Url.Action(жUpdateCartItemAmountж, жCartж)',
				method: жPOSTж,
				data: {
					жBookIdж:bookId,
					жAmountж:amount
				},
				success: function(data, statusCode) {
					console.log(жCart Item Amount Updated!ж)

					$(ж#total-amount-ж+bookId).text(price*amount).append(ж KZTж);
					refreshTotalPrice();
				},
				error: function(errorCode) {
					console.log(жError Updating Amount!ж)
					
				}
			})
		}

	})
</script>